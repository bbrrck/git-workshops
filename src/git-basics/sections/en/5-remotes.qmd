# Remote Repositories

## What is a remote repository?

- So far, we have been working with a **local** Git repository that is stored on our computer

- A **remote repository** is stored on the Internet --- more precisely, on a web server  
*e.g. github.com, corporate server, university server, ...*

::: {.fragment}
- There are two types of *remote* repositories:
    a. **public** repository is shared with all users who have access to the server
    b. **private** repository is shared only with selected users
:::


## What are remote repositories used for?
1. **Backup** of code
2. **Sharing** of code
3. **Synchronization** of code in a team


## Creating a repository on GitHub --- [github.com/new](https://github.com/new)
::: {.screenshot}
![](./src/git-basics/img/gh-new-repo/gh-new-full.png)
:::


## Creating a repository on GitHub --- [github.com/new](https://github.com/new)
::: {.screenshot}
![](./src/git-basics/img/gh-new-repo/gh-new-top.png)
:::


## Creating a repository on GitHub --- [github.com/new](https://github.com/new)
::: {.screenshot}
![](./src/git-basics/img/gh-new-repo/gh-new-bottom.png)
:::


## Creating a repository on GitHub --- [github.com/new](https://github.com/new)
::: {.screenshot}
![](./src/git-basics/img/gh-new-repo/gh-new-empty-repo.png)
:::


## Creating a repository on GitHub --- [github.com/new](https://github.com/new)
::: {.screenshot}
![](./src/git-basics/img/gh-new-repo/gh-new-empty-repo-circled.png)
:::


## Setting up a remote in the local repository

- We use the `git remote add <name> <url>` command to set up a remote repository:
```zsh
git remote add origin https://github.com/bbrrck/zoo.git
```
- `name` is used by Git as the name of the remote repository at `url`. The name can be anything; the name `origin` is commonly used.
- A local repository can have more than one remote assigned.


## Sending a local copy to a remote

- The `git push <remote> <branch>` command "pushes" local changes from the `branch` branch to the remote repository `remote`:
```zsh
git push origin main
```
- When calling `git push` for the first time, you need to add the `-u` argument:
```zsh
git push -u origin main
```
- `-u` or `--set-upstream` sets the default remote branch (`origin/main`) for the current local branch (`main`)

- if the remote branch `origin/main` does not exist, `git push` will create it automatically

## Example output from `git push`
```zsh
git push -u origin main
```

- Output:
```zsh
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 241 bytes | 120.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/bbrrck/test-repo-01.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.
```


## Side note: logging in to GitHub

- To allow Git to send data to GitHub, authentication is required
- The easiest way to manage credentials: [Git Credential Manager](https://github.com/GitCredentialManager/git-credential-manager)  
(it is included in [Git for Windows](https://gitforwindows.org/))
- Configuration starts automatically after the first `git push` is run

::: {.columns}
::: {.column width=30%}
![](./src/git-basics/img/gh-win-auth/credential-helper-selector-v2.png){.gh-win-auth}
:::
::: {.column width=25%}
![](./src/git-basics/img/gh-win-auth/auth-signin.png){.gh-win-auth}
:::
::: {.column width=20%}
![](./src/git-basics/img/gh-win-auth/auth-confirm.png){.gh-win-auth}
:::
::: {.column width=25%}
![](./src/git-basics/img/gh-win-auth/auth-success.png){.gh-win-auth style="height:200px"}
:::
:::


## List of branches
- `git branch -a` lists all branches, both local and remote
- `-a` is short for `--all`
```zsh
git branch -a
```
- Output --- `*` indicates the current branch:
```js
* main
  tiger
  remotes/origin/main
```


## Conflict: remote changes don't exist locally
```zsh
To https://github.com/bbrrck/zoo.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/bbrrck/zoo.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```


## Fetching remote changes into a local branch
- Use the `git fetch` command to fetch the list of changes from the remote branch:
```zsh
git fetch
```
- Merge the changes that are not part of the local branch using `git merge`:
```zsh
git merge # without arguments
```
- In most cases, you can simply use the `git pull` command, which is a combination of `git fetch` and `git merge`:
```zsh
git pull
```


## Cloning an existing remote repository

- You can clone an existing remote repository using `git clone`:
```zsh
git clone <remote_url> <local_folder>
```
- This command creates a copy of the repository from `remote_url` in the `local_folder` directory
- Example:
```zsh
git clone https://github.com/bbrrck/zoo.git myzoo
# or
git clone https://github.com/bbrrck/zoo.git # clones into the `zoo` directory
```


## Exercises (3) {.exercise #exercise-3-remotes}

::: {.fontsize-090 }
1. Create a repository on [{{< var remoteserver.name >}}]({{< var remoteserver.url >}}) with the name {{< var remoteserver.repo-name >}}.
2. Add this remote to your local repository.
3. Push the local `main` branch to the remote.
4. On {{< var remoteserver.name >}}, add an emoji for each animal in the `zoo.txt` file: üêºüêòüêØü¶í.
5. Synchronize your local repository with {{< var remoteserver.name >}}.
6. On {{< var remoteserver.name >}}, add a new line `krokod√≠l üêä` to the `zoo.txt` file and save a new version.
7. In your local repository, add a new line `gorila ü¶ç` to `zoo.txt` and save a new version.
8. Synchronize your local repository with {{< var remoteserver.name >}} and resolve any resulting merge conflicts.
:::