# Basic Git Concepts {#basics}

{{< include ./src/git-basics/diagrams/section-3-basics.qmd >}}

## Step 0: Working with the terminal

- In order to understand how Git works, we will start by using Git through the **terminal**
- Later on, we will also show how to use Git directly in an IDE (e.g. VS Code)
- On **Windows**, I recommend using [Windows Terminal](
https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701?hl=en-us&gl=us)
 with [PowerShell](
https://docs.microsoft.com/en-us/powershell/)
 (built-in) or [Nushell](
https://www.nushell.sh/)


...

::: {.fontsize-080}
- Basic commands for navigating between directories in the terminal:
    - `pwd` --- print the current directory
    - `cd folder` --- change the current directory to `folder`

```sh
>> pwd                       # C:/Users/tibor.stanko
>> cd folder                 # C:/Users/tibor.stanko/folder
>> cd ..                     # C:/Users/tibor.stanko
>> cd C:/Users/janko.hrasko  # C:/Users/janko.hrasko
>> cd ~                      # C:/Users/tibor.stanko
```

:::


## Step 1: Installing Git

- There are several ways to install Git on **Windows**, for example:
    - using the [classic installer](https://git-scm.com/download/win)
    - using [scoop](https://scoop.sh/) (recommended) --- run the following commands in PowerShell:

```sh
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
irm get.scoop.sh | iex # install scoop
scoop install git # install git
```

- Instructions for **macOS** or **Linux** can be found on the official website in [English](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) or [Czech](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).


## Step 2: Configuring Git

- Check if Git is installed correctly:

```sh
git --version
```

- Before we start working with Git, we need to set our name and email using the `git config` command. Git will use these details to assign the author of the version.

```sh
git config --global user.name "Tibor Stanko"
git config --global user.email "tibor.stanko@zurich.com"
```

- Set the default branch to `main` (we will talk more about [branches](#/branches) later)

```sh
git config --global init.defaultBranch "main"
```

## Step 3: Creating a Git repository

- Navigate to the directory where we want to create the repository:

```sh
cd ~/hello
```

- The `git init` command is used to create a Git repository in the current directory:

```sh
git init
```

- After running the command, Git will output:

```changelog
Initialized empty Git repository in C:/Users/tibor.stanko/hello/.git/
```

## Step 3: Creating a Git repository

- We can check the status of the repository using `git status`:

```sh
git status
```

- This is what the status of an empty Git repository looks like (no files or saved versions):

```changelog
On branch main

No commits yet

nothing to commit (create/copy files and use "git add" to track)
```

## Step 4: Saving a version

Saving a version involves two steps.

1. Use `git add` to mark changes that should be added to the new version:

```sh
git add hello.py
```

2. Use `git commit` to create a record of the new version:

```sh
git commit -m "Add hello.py"
```

## Step 4: Saving a version

- The commit message is usually a short, one-line description specified with the `-m "commit message"` argument.
- If you want to write a longer description, omit the `-m` argument. `git commit` will then open a text editor where you can write the description.
- In Git on Windows, the default editor for writing commit messages is `vim`, which runs directly in the terminal. If you are not familiar with using `vim`, you can change the editor to `notepad`, for example:
`git config --global core.editor notepad`


## Step 4: Saving a version

Don't slack off when writing commit messages!

::: {.center .width-060}
![](./src/git-basics/img/git_commit_2x.png)
:::

:::footer
[xkcd:1296](https://xkcd.com/1296/)
:::


## Why do we save a version in two steps?

Some version control systems work by creating a new version from all the current files in the repository. This method of saving backups can be inefficient. For example, if we have implemented two independent features in the repository and we want to capture them in two separate versions. Therefore, Git introduces the concept of the *staging area*, which allows us to control which changes will be included in the next version.

```zsh
# 1. add/stage - add file to the staging area
git add test.txt
# 2. commit - save a new version
git commit -m "added test.txt"
```

## Step 5: Checking the status of the repository

- We can check the current status of the repository using `git status`:
```changelog
On branch main
nothing to commit, working tree clean
```

- We can use the `git log` command to verify that a commit was created:

```zsh
commit bf5c9b4a320012b422546fcb86f5b957104bea55 (HEAD -> main)
Author: Tibor Stanko <tibor.stanko@gmail.com>
Date:   Tue Sep 13 17:00:00 2022 +0200

    Add hello.py
```

## Unstaging a file

- Use `git reset [file]` to unstage a file while retaining changes in the working directory

```zsh
git status
```

```changelog
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   test1.txt
        new file:   test2.txt
```

```zsh
git reset test2.txt
git status
```

```changelog
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   test1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        test2.txt
```

## Exercises (1) {.exercise #exercise-1-basics}

::: {.exercise}
1. Create an empty directory `zoo` on your computer.
2. Turn the `zoo` directory into a Git repository.
3. In the repository, create a file `test.txt` with any content.
4. Add `test.txt` to the next version and save it.
5. Check the new version using `git log`.
:::

::: {.fontsize-080}
**Tip**: don't forget to use `git status` while working to see the current status of the repository.
:::
