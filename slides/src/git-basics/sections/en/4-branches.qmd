# Branches

{{< include ./src/git-basics/diagrams/section-4-branches.qmd >}}

## What is a branch?

- Branches allow us to deviate from the main line and continue working without interfering with it
- Branching is a strong feature of Git --- switching between branches is fast, which allows for frequent creation of new branches
- So far, we have been working on the `main` branch, which was automatically created by `git init`

- We can see a list of branches using the `git branch` command:
```sh
>> git branch
* main
```

::: {.fontsize-080 .before-1em}
The default Git branch used to be `master`. Due to its negative connotations, this name is gradually [being phased out](https://github.blog/changelog/2020-10-01-the-default-branch-for-newly-created-repositories-is-now-main/). Therefore, when [configuring Git](#/step-2-configuring-git), we changed `init.defaultBranch` to `main`.
:::

## What are branches good for?

- Branches allow us to work efficiently in parallel on multiple parts of the project
- For example, when we are developing a new feature (branch A) and a bug needs to be fixed immediately (branch B)
- Thanks to Git, work on these two branches can proceed independently

::: {.todo}
rewrite/improve second bullet
:::

## Creating a branch

- To create a new branch called `french`, we call:
```sh
git branch french
```

- If we want to switch to the new branch:
```sh
git checkout french
```

- These two operations are often done together, so there is a shortcut:
```sh
git checkout -b slovak # create branch 'slovak' and switch to it
```

## Merging branches

- If we want to add changes made on the `slovak` branch to the main `main` branch, we first switch to the main branch:
```sh
git checkout main
```
- We use the `git merge` command to merge branches:
```sh
git merge slovak
```

## Merging branches
#### Auto-merge
- If possible, Git will automatically merge the changes from both branches. In that case, we will see the following output:
```js
>> git merge slovak
Auto-merging hello.py
Merge made by the 'ort' strategy.
 hello.py | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)
 ```


## Merging branches
#### Fast-forward
- If the merged branch is a direct descendant of the target branch, Git will do a so-called *fast-forward*:
```js
>> git merge comment
Updating 3a5d22e..9ad633c
Fast-forward
 hello.py | 1 +
 1 file changed, 1 insertion(+)
 ```


## Merging branches
#### Resolving conflicts
- If automatic merging fails, Git will report a *merge conflict* in the output. In this case, changes from both branches must be merged manually.
```js
>> git merge french
Auto-merging hello.py
CONFLICT (content): Merge conflict in hello.py
Automatic merge failed; fix conflicts and then commit the result.
```
- After manually merging, it is necessary to add the modified files to the new version:
```sh
git add hello.py
git commit -m "Merged branch 'french'"
```

## Deleting a branch
- If we no longer need a branch after merging it, we can delete it using `git branch --delete`, or `git branch -d` for short.
```sh
git branch -d comment
```

::: {.warning .fade-in}  
After deletion, the branch is removed from history and cannot be restored.
:::

## Example `git log` history

{{< include ./src/git-basics/diagrams/git-log-example.qmd >}}

```changelog
*   3a5d22e (HEAD -> main) Merge branch 'french'
|\
| * 21c7ab7 (french) Add french functionality
* |   1364948 Merge branch 'slovak'
|\ \
| * | c3159a6 (slovak) Add slovak functionality
| |/
* / 67e86d0 Fix missing exclamation mark
|/
* de1543b Add hello.py
```


## {background-image="./src/git-basics/img/git-conflict-vs-code-gui.png" background-size="contain"}


## Exercises (2) {.exercise #exercise-2-branches}

::: {.fontsize-090}
1. Switch to a new branch `animals` in your local repository.
2. Create a new file `zoo.txt` in the repository with the following content:

::: {.fontsize-070}
```changelog
panda
slon
lev
zirafa
```
:::
3. Save a new version that will contain `zoo.txt`.
4. Merge changes made on the `animals` branch into the `main` branch and delete the `animals` branch.
5. On a new `tiger` branch, change the `lev` line to `tiger` and save a new version.
6. Switch to the `main` branch, fix the `zirafa` line to `Å¾irafa`, and save a new version.
7. Merge changes from the `tiger` branch into the `main` branch.
:::